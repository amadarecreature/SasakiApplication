/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main/ts/index.ts":
/*!******************************!*\
  !*** ./src/main/ts/index.ts ***!
  \******************************/
/***/ (() => {

eval("\nvar MainProcess = /** @class */ (function () {\n    function MainProcess() {\n        this.dropZone1 = document.getElementById(\"drop-zone1\");\n        this.dropZone2 = document.getElementById(\"drop-zone2\");\n        this.videoFile1 = document.getElementById(\"videoFile1\");\n        this.videoFile2 = document.getElementById(\"videoFile2\");\n        this.interval1 = document.getElementById(\"interval1\");\n        this.interval2 = document.getElementById(\"interval2\");\n        this.btnForward1 = document.getElementById(\"btnForward1\");\n        this.btnBack1 = document.getElementById(\"btnBack1\");\n        this.btnForward2 = document.getElementById(\"btnForward2\");\n        this.btnBack2 = document.getElementById(\"btnBack2\");\n        this.isButton1On = false;\n        this.isButton2On = false;\n        // const seekBar1 = <HTMLInputElement>document.getElementById(\"seekBar1\");\n        var video1 = document.getElementById(\"video1\");\n        var sPanCurrentTime1 = document.getElementById(\"currentTime1\");\n        var nagasa1 = document.getElementById(\"nagasa1\");\n        var message1 = document.getElementById(\"kanryou1\");\n        // this.videoMgr1 = new VideoControllerManager(video1, seekBar1, sPanCurrentTime1, message1, nagasa1);\n        this.videoMgr1 = new VideoControllerManager(video1, sPanCurrentTime1, message1, nagasa1);\n        // const seekBar2 = <HTMLInputElement>document.getElementById(\"seekBar2\");\n        var video2 = document.getElementById(\"video2\");\n        var sPanCurrentTime2 = document.getElementById(\"currentTime2\");\n        var nagasa2 = document.getElementById(\"nagasa2\");\n        var message2 = document.getElementById(\"kanryou2\");\n        this.videoMgr2 = new VideoControllerManager(video2, sPanCurrentTime2, message2, nagasa2);\n        this.init();\n    }\n    MainProcess.prototype.initButton2 = function () {\n        var _this = this;\n        if (this.isButton2On) {\n            return;\n        }\n        this.btnForward2.addEventListener(\"click\", function (e) {\n            var interval = Number(_this.interval2.value);\n            _this.videoMgr2.clickUpVolume(interval);\n        });\n        this.btnBack2.addEventListener(\"click\", function (e) {\n            var interval = Number(_this.interval2.value);\n            _this.videoMgr2.clickDownVolume(interval);\n        });\n    };\n    MainProcess.prototype.initButton1 = function () {\n        var _this = this;\n        if (this.isButton1On) {\n            return;\n        }\n        this.btnForward1.addEventListener(\"click\", function (e) {\n            var interval = Number(_this.interval1.value);\n            _this.videoMgr1.clickUpVolume(interval);\n        });\n        // this.btnForward1.removeEventListener(\"click\", this.btnForward1Click);\n        // this.btnForward1.addEventListener(\"click\", this.btnForward1Click);\n        this.btnBack1.addEventListener(\"click\", function (e) {\n            var interval = Number(_this.interval1.value);\n            _this.videoMgr1.clickDownVolume(interval);\n        });\n    };\n    MainProcess.prototype.init = function () {\n        var _this = this;\n        this.videoFile1.addEventListener(\"change\", function (e) {\n            var fileList = _this.videoFile1.files;\n            _this.updateVideo(fileList, _this.videoMgr1);\n            _this.initButton1();\n        });\n        this.dropZone1.addEventListener(\"dragover\", function (e) {\n            _this.dropZoneOnDragover(e, _this.dropZone1);\n        }, false);\n        this.dropZone1.addEventListener('dragleave', function (e) {\n            _this.dropZoneOnDragLeave(_this.dropZone1, e);\n        }, false);\n        this.dropZone1.addEventListener('drop', function (e) {\n            _this.dropZoneOnDrop(_this.dropZone1, e, _this.videoFile1, _this.videoMgr1);\n            _this.initButton1();\n        }, false);\n        // 2個目\n        this.videoFile2.addEventListener(\"change\", function (e) {\n            var fileList = _this.videoFile2.files;\n            _this.updateVideo(fileList, _this.videoMgr2);\n            _this.initButton2();\n        });\n        this.dropZone2.addEventListener(\"dragover\", function (e) {\n            _this.dropZoneOnDragover(e, _this.dropZone2);\n        }, false);\n        this.dropZone2.addEventListener('dragleave', function (e) {\n            _this.dropZoneOnDragLeave(_this.dropZone2, e);\n        }, false);\n        this.dropZone2.addEventListener('drop', function (e) {\n            _this.dropZoneOnDrop(_this.dropZone2, e, _this.videoFile2, _this.videoMgr2);\n            _this.initButton2();\n        }, false);\n    };\n    MainProcess.prototype.dropZoneOnDragover = function (e, dropZone) {\n        e.stopPropagation();\n        e.preventDefault();\n        dropZone.style.background = '#e1e7f0';\n        console.info(\"dragover\");\n    };\n    MainProcess.prototype.dropZoneOnDragLeave = function (dropZone, e) {\n        e.stopPropagation();\n        e.preventDefault();\n        dropZone.style.background = '#ffffff';\n        console.info(\"dragleave\");\n    };\n    MainProcess.prototype.dropZoneOnDrop = function (dropZone, e, videoFile, videoMgr) {\n        e.stopPropagation();\n        e.preventDefault();\n        dropZone.style.background = '#ffffff'; //背景色を白に戻す\n        var transData = e.dataTransfer; //ドロップしたファイルを取得\n        var files = (transData == null) ? new FileList() : transData.files;\n        if (files.length > 1) {\n            alert('アップロードできるファイルは1つだけです。');\n        }\n        else {\n            videoFile.files = files; //inputのvalueをドラッグしたファイルに置き換える。\n            this.updateVideo(files, videoMgr);\n            console.info(\"drop\");\n        }\n    };\n    MainProcess.prototype.updateVideo = function (f, videoMgr) {\n        var files = (f == null) ? new FileList() : f;\n        videoMgr.updateVideo(files[0]);\n        console.info(\"change\");\n    };\n    MainProcess.prototype.forwardTime = function (video, interval, positionDom) {\n        video.currentTime = video.currentTime + Number(interval);\n        positionDom.innerHTML = video.currentTime.toString();\n    };\n    MainProcess.prototype.backwardTime = function (viedo, interval, positionDom) {\n        viedo.currentTime = viedo.currentTime - Number(interval);\n        positionDom.innerHTML = viedo.currentTime.toString();\n    };\n    return MainProcess;\n}());\nvar VideoControllerManager = /** @class */ (function () {\n    // readonly kanryou = ;\n    function VideoControllerManager(video, sPanCurrentTime, spanMessage, nagasa) {\n        this._video = video;\n        // this._seekbar = seekBar;\n        this._sPanCurrentTime = sPanCurrentTime;\n        this._spanMessage = spanMessage;\n        this._nagasa = nagasa;\n        this.init();\n    }\n    VideoControllerManager.prototype.init = function () {\n        var _this = this;\n        // this._seekbar.value = \"0\";\n        this._nagasa.innerHTML = \"-\";\n        this._sPanCurrentTime.innerHTML = \"-\";\n        // this._seekbar.min = \"0\";\n        // this._seekbar.max = \"0\";\n        // this._seekbar.step = \"0\";\n        this._video.addEventListener(\"loadedmetadata\", function (e) {\n            // if (isNaN(this._video.duration)) {\n            // this._seekbar.value = (current * 1000).toString();\n            // }\n            var duration = (isNaN(_this._video.duration)) ? Math.round(_this._video.duration) : 0;\n            _this._nagasa.innerHTML = (duration).toString();\n            // this._seekbar.min = \"0\";\n            // this._seekbar.max = (duration * 1000).toString();\n            // this._seekbar.step = \"1\";\n            // this._sPanCurrentTime.innerHTML = current.toString();\n        });\n        this._video.addEventListener(\"timeupdate\", function (e) {\n            var current = Math.floor(_this._video.currentTime);\n            var duration = Math.round(_this._video.duration);\n            _this.updateCurrentTimeInfo(duration, current);\n        });\n    };\n    VideoControllerManager.prototype.updateCurrentTimeInfo = function (duration, current) {\n        // if (!isNaN(duration)) {\n        //     this._seekbar.value = (current * 1000).toString();\n        // }\n        this._sPanCurrentTime.innerHTML = current.toString();\n    };\n    VideoControllerManager.prototype.playVideo = function () {\n        var _this = this;\n        //再生完了の表示をクリア\n        this._spanMessage.innerHTML = \"\";\n        //動画を再生\n        this._video.play();\n        //現在の再生位置（秒）を表示\n        this._video.addEventListener(\"timeupdate\", function (e) {\n            _this._sPanCurrentTime.innerHTML = _this._video.currentTime.toString();\n        }, false);\n        //再生完了を知らせる\n        this._video.addEventListener(\"ended\", function (e) {\n            _this._spanMessage.innerHTML = \"動画の再生が完了しました。\";\n        }, false);\n    };\n    VideoControllerManager.prototype.updateVideo = function (f) {\n        // const files = (f == null) ? new FileList() : f;\n        var movie_url = URL.createObjectURL(f);\n        this._video.src = movie_url;\n        //動画の長さ（秒）を表示\n        this._video.load();\n        this.playVideo();\n    };\n    VideoControllerManager.prototype.pauseVideo = function () {\n        //動画を一時停止\n        this._video.pause();\n    };\n    VideoControllerManager.prototype.clickUpVolume = function (interval) {\n        this._forwardTime(this._video, interval, this._sPanCurrentTime);\n    };\n    VideoControllerManager.prototype.clickDownVolume = function (interval) {\n        this._backwardTime(this._video, interval, this._sPanCurrentTime);\n    };\n    VideoControllerManager.prototype._forwardTime = function (video, interval, positionDom) {\n        video.currentTime = video.currentTime + Number(interval);\n        positionDom.innerHTML = video.currentTime.toString();\n    };\n    VideoControllerManager.prototype._backwardTime = function (viedo, interval, positionDom) {\n        viedo.currentTime = viedo.currentTime - Number(interval);\n        positionDom.innerHTML = viedo.currentTime.toString();\n    };\n    return VideoControllerManager;\n}());\n// Mainクラスを実行する。\nwindow.addEventListener(\"load\", function () { return new MainProcess(); });\n\n\n//# sourceURL=webpack://video-simple-controller/./src/main/ts/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/main/ts/index.ts"]();
/******/ 	
/******/ })()
;